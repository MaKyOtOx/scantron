- name: Update APT package cache.
  apt:
    update_cache: yes

- name: Install specified packages.
  apt:
    pkg: "{{ install_packages }}"
    state: latest

- name: Install masscan packages.
  apt:
    pkg: "{{ masscan_install_packages }}"
    state: latest
  when: install_masscan_on_agent

- name: Clone masscan Github repo.
  git:
    repo: "https://github.com/robertdavidgraham/masscan.git"
    dest: "{{ agent_dir }}/masscan"
    version: master
  ignore_errors: true  # For re-runs only.
  when: install_masscan_on_agent

- name: Run make for masscan.
  command: make -j
  args:
    chdir: "{{ agent_dir }}/masscan"
  when: install_masscan_on_agent

- name: Check that masscan binary exists.
  stat:
    path: "{{ agent_dir }}/masscan/bin/masscan"
  register: masscan_stat
  when: install_masscan_on_agent

- name: Copy masscan binary to /usr/bin
  command: cp "{{ agent_dir }}/masscan/bin/masscan" /usr/bin/masscan
  when: (masscan_stat.stat.exists == True) and
        (install_masscan_on_agent == True)

- name: Create autossh user.
  user:
    name: autossh
    shell: /bin/bash

- name: Push autossh.pub authorized_keys to remote server.
  authorized_key:
    user: autossh
    key: "{{ lookup('file', 'files/autossh.pub') }}"

- name: Push autossh.key to remote server.
  authorized_key:
    user: autossh
    key: "{{ lookup('file', 'files/autossh.key') }}"

- name: rsync agent files to server.
  synchronize:
    src: ../../../../agent
    dest: /root
  # Only required if re-running Ansible on an agent that already has comms with master.
  # Ansible will get angry since it can't chown /root/agent/nmap_results and /root/agent/target_files
  ignore_errors: yes

- name: Generate random agent name.
  set_fact:
    random_agent_number: "{{ range(1, 999999) | random }}"
  when: utilize_static_api_token_across_agents

- name: Update agent_config.json configuration file with a static API token and random agent name if utilize_static_api_token_across_agents in group_vars/all is set to True.
  template:
    src: templates/agent_config.json
    dest: /root/agent/agent_config.json
    backup: no
    owner: root
    group: root
    mode: 0700
  when: utilize_static_api_token_across_agents

- name: Copy random_agent_number into group_vars/<agent_exteral_ip>.txt
  local_action: copy content="agent-{{ random_agent_number }}" dest="group_vars/{{ agent_exteral_ip }}.txt"
  when: utilize_static_api_token_across_agents

- name: Create "{{ venv_dir }}" virtualenv directory.
  command: "virtualenv -p /usr/bin/python3.6 {{ venv_dir }}"
  ignore_errors: yes  # For reruns only.

- name: Install pip requirements.
  pip:
    requirements: "{{ agent_dir }}/requirements.txt"
    virtualenv: "{{ venv_dir }}"
    virtualenv_python: "{{ venv_python }}"

- name: Add crontab entry for nfs_watcher.sh
  cron:
    name: nfs_watcher.sh
    minute: "*"
    hour: "*"
    day: "*"
    month: "*"
    weekday: "*"
    job: /root/agent/nfs_watcher.sh
    user: root

- name: Make nfs_watcher.sh executable.
  file:
    path: /root/agent/nfs_watcher.sh
    owner: root
    group: root
    mode: 0700

- name: "Create symbolic link for scantron-agent service configuration file -- {{ agent_dir }}/scantron-agent.service --> /lib/systemd/system/scantron-agent.service"
  file:
    src: "{{ agent_dir }}/scantron-agent.service"
    dest: /lib/systemd/system/scantron-agent.service
    owner: root
    group: root
    state: link

- name: Copying custom logrotate configuration file to /etc/logrotate.d/
  copy:
    src: "files/etc/logrotate.d/scantron-agent"
    dest: "/etc/logrotate.d/scantron-agent"
    owner: root
    group: root
    mode: 0644  # Must be 0644 or 0444

- name: chmod files to root only
  file:
    path: "{{ agent_dir }}"
    owner: root
    group: root
    recurse: yes
    mode: 0700
  ignore_errors: True  # For rerun conflicts.

# Must be after chmod/chown of /root/agent folder
- name: Change owner of autossh.key to autossh and update file permissions.
  file:
    path: "{{ agent_dir }}/autossh.key"
    owner: autossh
    group: autossh
    mode: 0600

- name: Upload /etc/rc.local
  template:
    src: templates/etc/rc.local.j2
    dest: /etc/rc.local
    backup: yes
    owner: root
    group: root
    mode: 0755

- name: Reboot the box in 1 minute.
  command: shutdown -r 1
  when: reboot_box
